% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netCall.R
\name{netCall}
\alias{netCall}
\title{Call method}
\usage{
netCall(x, methodName, ..., wrap = FALSE, out_env = parent.frame())
}
\arguments{
\item{x}{a .Net object, which can be an \code{externalptr} or a \code{NetObject}.}

\item{methodName}{Method name to call}

\item{...}{Method arguments}

\item{wrap}{Specify if you want to wrap \code{externalptr} .Net object results into \code{NetObject} \code{R6} object. `FALSE`` by default.}

\item{out_env}{In case of a .Net method with \code{out} or \code{ref} argument is called,
specify on which \code{environment} you want to out put this arguments.
By default it's the caller \code{environment} i.e. \code{parent.frame()}.}
}
\value{
Returns the .Net result.
If a converter has been defined between the .Net type and a \code{R} type, the \code{R} type will be returned.
Otherwise an \code{externalptr} or a \code{NetObject} if \code{wrap} is set to \code{TRUE}.
}
\description{
Call a .Net method member for a given a .Net object.
}
\details{
Call a method member for a given .Net object.
Ellipses has to keep the .Net arguments method order, the named arguments are not yet supported.
If there is conflicts with a method name (many definition in .Net), a score is computed from your argument's
order and type. We consider a higher score single value comparing to collection of values.

If you decide to set \code{wrap} to \code{TRUE}, the function returns a \code{NetObject} instead of a raw \code{externalptr}.
To remind an \code{externalptr} is returned only if no one native converter has been found.
The \verb{NetObject R6} object wrapper can be an inherited \code{R6} class. For more details about
inherited \code{NetObject} class please see \code{netGenerateR6} function.

The \code{out_env} is usefull when the callee .Net method has some \code{out} or \code{ref} argument.
Because in .Net this argument set the given variable in the caller scope. We reflect this
mechanism in R. By default the given varable is modify in the parent \verb{R environment} which means
the caller or \code{parent.frame()}. You can decide where to redirect the outputed value
by specifying another \code{environment}. Of course be sure that the variable name exists in this
targetd \code{environment}.
}
\examples{
\dontrun{
library(sharper)

package_folder <- path.package("sharper")
netLoadAssembly(file.path(package_folder, "tests", "AssemblyForTests.dll"))

x <- netNew("AssemblyForTests.OneCtorData", 21L)
netCall(x, "ToString")

# wrap result
x <- NetObject$new(ptr = x)
clone <- netCall(x, "Clone", wrap = TRUE)

# out a variable
x <- netNew("AssemblyForTests.DefaultCtorData")
out_variable = 0
netCall(x, "TryGetValue", out_variable)
}
}
