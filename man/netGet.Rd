% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/netGet.R
\name{netGet}
\alias{netGet}
\title{Get property value}
\usage{
netGet(x, propertyName, wrap = FALSE)
}
\arguments{
\item{x}{.Net object}

\item{propertyName}{Property name to get value}

\item{wrap}{Specify if you want to wrap \code{externalptr} .Net object into \code{NetObject} \code{R6} object. `FALSE`` by default.}
}
\value{
Returns the .Net property value.
If a converter has been defined between the .Net type and a \code{R} type, the \code{R} type will be returned.
Otherwise an \code{externalptr} or a \code{NetObject} if \code{wrap} is set to \code{TRUE}.
}
\description{
Gets a property value from a .Net object
}
\details{
Allows you to get a property value for a .Net object.
The result will be converted if the type mapping is defined. All native C# types are mapped to R types
but you can define custom converters in C# for that see the C# \code{RDotNetConverter} class.

If you decide to set \code{wrap} to \code{TRUE} this function supports the \verb{NetObject R6} class and all inherited.
The function result if no converter has been found will return a \code{NetObject} of an inherited best type
instead of a raw \code{externalptr}. For more details about inherited \code{NetObject} class please see \code{netGenerateR6} function.
}
\examples{
\dontrun{
library(sharper)

package_folder = path.package("sharper")

x <- netNew("AssemblyForTests.DefaultCtorData")
netSet(x, "Name", "foo")
x_name <- netGet(x, "Name")

netSet(x, "Integers", c(12L, 23L))
x_integers <- netGet(x, "Integers")

}
}
